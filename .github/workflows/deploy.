name: CI/CD - Build WAS and Update Manifests

on:
  push:
    branches: [ "main" ]     # main 브랜치 푸시 시 자동 실행

permissions:
  contents: write            # manifests 리포 커밋/푸시에 필요
  packages: write            # GHCR 이미지 푸시에 필요

concurrency:
  group: cicd-main           # 같은 브랜치 동시 실행 방지
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 앱 코드 체크아웃 (현재 리포: soloud_project)
      - name: Checkout app repo
        uses: actions/checkout@v4

      # 2) GHCR 로그인
      #    - GHCR_USERNAME : GitHub ID
      #    - GHCR_TOKEN    : PAT (write:packages 권한 포함)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 3) WAS 이미지 빌드 & 푸시
      #    - ./was 디렉토리에 Dockerfile 있다고 가정
      - name: Build & Push WAS
        uses: docker/build-push-action@v5
        with:
          context: ./was
          push: true
          tags: |
            ghcr.io/${{ secrets.GHCR_USERNAME }}/soloud-was:${{ github.sha }}
            ghcr.io/${{ secrets.GHCR_USERNAME }}/soloud-was:latest

      # 4) 매니페스트 리포 체크아웃 (별도 리포: soloud-manifests)
      #    - MANIFESTS_PAT: 해당 리포에 푸시 가능한 PAT
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: soloud1025/soloud-manifests
          token: ${{ secrets.MANIFESTS_PAT }}
          path: manifests

      # 5) WAS 이미지 태그 치환 (sed)
      - name: Update WAS image in manifests
        run: |
          WAS_IMAGE="ghcr.io/${{ secrets.GHCR_USERNAME }}/soloud-was:${GITHUB_SHA}"
          sed -i "s|^\(\s*image:\s*\).*soloud-was.*$|\1$WAS_IMAGE|" manifests/k8s/was/was-deployment.yaml
          echo "WAS_IMAGE=${WAS_IMAGE}"

      # 6) 커밋 & 푸시 → ArgoCD가 k8s/was 감시하여 자동 Sync
      - name: Commit & Push
        run: |
          cd manifests
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add k8s/was/was-deployment.yaml
          git commit -m "chore: deploy WAS=${{ github.sha }}" || echo "No changes"
          git push

